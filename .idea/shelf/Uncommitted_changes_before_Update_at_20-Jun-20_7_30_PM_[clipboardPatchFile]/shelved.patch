Index: PhotoManiPY.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nModule: PhotoManiPY for Photo ManiPY\r\nDescription:\r\n\r\nMade by: Maximilian Rose\r\nCreated on 13/02/2020\r\nIDE: PyCharm\r\n\"\"\"\r\n\r\nimport pathlib as pl\r\nimport tkinter as tk\r\nfrom tkinter import filedialog\r\n\r\nfrom PIL import ImageTk\r\n\r\nimport codec\r\nimport edit_image as ei\r\nimport manage_image as mi\r\n\r\n\r\nclass Window(tk.Frame):\r\n    def __init__(self, master=None):\r\n        tk.Frame.__init__(self, master)\r\n        self.master = master\r\n        self.init_window()\r\n\r\n    # Creation of init_window\r\n    def init_window(self):\r\n        def update_outpath(path):\r\n            \"\"\"\r\n            Function that adds the changes to the filename then sets the output to this, this is that any changes in\r\n            what edits are going to be done are reflected if those changes are made after the filename was last loaded.\r\n\r\n            :param path: The path of the file that will be used\r\n            \"\"\"\r\n            hsl = f\"({tool_hue_shift_hue.get()},{tool_hue_shift_sat.get()},{tool_hue_shift_lum.get()})\"\r\n            crop = f\"({tool_crop_top.get()},{tool_crop_bottom.get()})\"\r\n            resize = f\"(x{tool_resize_vertical.get()},x{tool_resize_horizontal.get()})\"\r\n\r\n            outpath = path.replace(pl.Path(path).suffix, \"\") + hsl + crop + resize + current_dropdown.get()\r\n\r\n            file_io_output_path.delete(0, tk.END)\r\n            file_io_output_path.insert(0, outpath)\r\n\r\n        def browse_file_in():\r\n            \"\"\"\r\n            Function that opens a file browse dialogue then changes the input entry box and output entry box accordingly\r\n            \"\"\"\r\n            # File dialogue\r\n            filetypes = file_io_input_ext_entry.get().replace(\":\", \" \")\r\n            path = filedialog.askopenfilename(\r\n                filetypes=((\"Image Files\", filetypes), (\"All files\", \"*\")))  # Add the readout from the other entry\r\n\r\n            # Change the input boxes to reflect loaded path\r\n            file_io_input_path.delete(0, tk.END)\r\n            file_io_input_path.insert(0, path)\r\n\r\n            # Change to default values of crop\r\n            cur_image = mi.open_image(file_io_input_path.get())\r\n            width, height = cur_image.size\r\n\r\n            tool_crop_bottom.delete(0, tk.END)\r\n            tool_crop_bottom.insert(0, width)\r\n\r\n            tool_crop_bottom2.delete(0, tk.END)\r\n            tool_crop_bottom2.insert(0, height)\r\n\r\n            update_outpath(path)\r\n\r\n        def browse_file_out():\r\n            \"\"\"\r\n            Function that opens a folder browse dialouge then changes output path accordingly\r\n            TODO: Make this a functining system not whatever it is now\r\n            \"\"\"\r\n            file_io_output_path.delete(0, tk.END)\r\n            path = filedialog.askopenfilename(\r\n                filetypes=((\"Image Files\", \"*.jpg\"), (\"All files\", \"*\")))  # Add the readout from the other entry\r\n            file_io_output_path.insert(0, path)\r\n\r\n        def execute_file():\r\n            \"\"\"\r\n            Function that applies the changes to the file indicated by the filepath, It first finds the values used\r\n            for the changes, then applies them in the order:\r\n            1. Crop the image\r\n            2. Shift the hue of the image\r\n            3. Resize the image\r\n            4. Any other post-processing effects\r\n            5. Save the image\r\n            \"\"\"\r\n\r\n            # Update filename\r\n            update_outpath(file_io_input_path.get())\r\n\r\n            # Find changes\r\n            cur_image = mi.open_image(file_io_input_path.get())\r\n            crop_point1 = (int(tool_crop_top.get()), int(tool_crop_top2.get()))\r\n            crop_point2 = (int(tool_crop_bottom.get()), int(tool_crop_bottom2.get()))\r\n            hue_shift = int(tool_hue_shift_hue.get())\r\n            sat_shift = int(tool_hue_shift_sat.get())\r\n            lum_shift = int(tool_hue_shift_lum.get())\r\n            resize_x = float(tool_resize_horizontal.get())\r\n            resize_y = float(tool_resize_vertical.get())\r\n            output = file_io_output_path.get()\r\n\r\n            # Apply changes\r\n            cur_image = ei.crop(cur_image, crop_point1, crop_point2)\r\n            cur_image = ei.shift_hsl(cur_image, hue_shift, sat_shift, lum_shift)\r\n            cur_image = ei.resize(cur_image, (resize_x, resize_y))\r\n\r\n            # Save image\r\n            if \".maxpg\" in output:\r\n                codec.save_as_codec(cur_image, output)\r\n            else:\r\n                mi.save_image(cur_image, output)\r\n\r\n        def open_preview():\r\n            \"\"\"\r\n            Function to open a preview window of the image indicated from the filepath\r\n            \"\"\"\r\n\r\n            filepath = pl.Path(file_io_input_path.get())\r\n            prev_win = tk.Toplevel()\r\n            prev_win.wm_title(filepath.name)\r\n\r\n            # Find changes\r\n            cur_image = mi.open_image(file_io_input_path.get())\r\n            crop_point1 = (int(tool_crop_top.get()), int(tool_crop_top2.get()))\r\n            crop_point2 = (int(tool_crop_bottom.get()), int(tool_crop_bottom2.get()))\r\n            hue_shift = int(tool_hue_shift_hue.get())\r\n            sat_shift = int(tool_hue_shift_sat.get())\r\n            lum_shift = int(tool_hue_shift_lum.get())\r\n            resize_x = float(tool_resize_horizontal.get())\r\n            resize_y = float(tool_resize_vertical.get())\r\n            # output = file_io_output_path.get()\r\n\r\n            # Apply changes\r\n            cur_image = ei.crop(cur_image, crop_point1, crop_point2)\r\n            cur_image = ei.shift_hsl(cur_image, hue_shift, sat_shift, lum_shift)\r\n            cur_image = ei.resize(cur_image, (resize_x, resize_y))\r\n\r\n            pic = ImageTk.PhotoImage(cur_image)\r\n\r\n            img = tk.Label(prev_win, image=pic)\r\n            img.image = pic\r\n\r\n            img.grid(row=0, column=0)\r\n\r\n        def open_GUI():\r\n            # ----- WINDOW -----\r\n            # Setup window\r\n            filepath = pl.Path(file_io_input_path.get())\r\n            gui_win = tk.Toplevel()\r\n            gui_win.wm_title(filepath.name)\r\n            gui_win.iconbitmap(\"./images/favicon.ico\")\r\n\r\n            # ----- FRAMES -----\r\n            # Define the Frames for each section\r\n            toolbar = tk.Frame(gui_win, bd=1, relief=\"raised\")\r\n            toolbar.grid(row=0, column=0)\r\n\r\n            # ----- WIDGETS -----\r\n            # Define toolbar buttons\r\n            crop_icon = mi.open_image(\"./images/crop_icon.png\")\r\n            crop_image = ImageTk.PhotoImage(crop_icon)\r\n\r\n            gui_tool_crop_button = tk.Button(toolbar, image=crop_image)\r\n            gui_tool_crop_button.image = crop_image\r\n\r\n            gui_tool_crop_button.grid(row=0, column=0)\r\n\r\n            # Define image display\r\n            cur_image = mi.open_image(file_io_input_path.get())\r\n\r\n            main_pic = ImageTk.PhotoImage(cur_image)\r\n\r\n            img = tk.Label(gui_win, image=main_pic)\r\n            img.image = main_pic\r\n\r\n            img.grid(row=1, column=0)\r\n\r\n        # ----- WINDOW -----\r\n        # Setup window\r\n        self.master.title(\"Photo ManiPy\")\r\n        self.master.iconbitmap(\"./images/favicon.ico\")\r\n        self.grid(row=0, column=0)\r\n\r\n        # ----- FRAMES -----\r\n        # Define the Frames for each section\r\n        file_io = tk.LabelFrame(self, text='File I/O')  # remove dimensions when filled\r\n        tool = tk.LabelFrame(self, text='Tools')\r\n        image = tk.LabelFrame(self, text='Image')\r\n\r\n        file_io.grid(row=0, column=0, columnspan=2, sticky=\"NSEW\", padx=5, pady=5)\r\n        tool.grid(row=1, column=0, columnspan=3, rowspan=6, sticky=\"NSEW\", padx=5, pady=5)\r\n        image.grid(row=0, column=2, columnspan=2, sticky=\"NSEW\", padx=5, pady=5)\r\n\r\n        # Define sub-frames for file IO\r\n        file_io_input_ext = tk.LabelFrame(file_io, text='Input file extensions')\r\n        file_io_output_ext = tk.LabelFrame(file_io, text='Output extension')\r\n\r\n        file_io_input_ext.grid(row=2, column=0, columnspan=2, sticky=\"NSEW\", padx=5, pady=5)\r\n        file_io_input_ext.grid_columnconfigure(0, weight=1)\r\n        file_io_output_ext.grid(row=2, column=2, columnspan=1, sticky=\"NSW\", padx=5, pady=5)\r\n\r\n        # Define sub-frames for tools\r\n        tool_hue_shift = tk.LabelFrame(tool, text='Shift Hue')\r\n        tool_crop = tk.LabelFrame(tool, text='Crop')\r\n        tool_resize = tk.LabelFrame(tool, text='Resize')\r\n\r\n        tool_hue_shift.grid(row=0, column=0, sticky=\"NSEW\", padx=5, pady=5)\r\n        tool_crop.grid(row=0, column=1, sticky=\"NSEW\", padx=5, pady=5)\r\n        tool_resize.grid(row=0, column=2, sticky=\"NSEW\", padx=5, pady=5)\r\n\r\n        # ----- WIDGETS -----\r\n        # Define widgets for file IO main\r\n        file_io_input_path_text = tk.Label(file_io, text=\"Input Path:\\n(File or Folder)\")\r\n        file_io_input_path = tk.Entry(file_io, width=75)\r\n        file_io_browse_in = tk.Button(file_io, text='Browse', command=browse_file_in)\r\n        file_io_output_path_text = tk.Label(file_io, text=\"Output Path:\")\r\n        file_io_output_path = tk.Entry(file_io, width=75)\r\n        file_io_browse_out = tk.Button(file_io, text='Browse', command=browse_file_out)\r\n\r\n        file_io_input_path_text.grid(row=0, column=0, padx=5, pady=5)\r\n        file_io_input_path.grid(row=0, column=1, columnspan=3, padx=5, pady=5)\r\n        file_io_browse_in.grid(row=0, column=4, padx=5, pady=5)\r\n        file_io_output_path_text.grid(row=1, column=0, padx=5, pady=5)\r\n        file_io_output_path.grid(row=1, column=1, columnspan=3, padx=5, pady=5)\r\n        file_io_browse_out.grid(row=1, column=4, padx=5, pady=5)\r\n\r\n        # Define widgets for file IO input extensions\r\n        file_io_input_ext_entry = tk.Entry(file_io_input_ext)\r\n        file_io_input_ext_entry.insert(0, \"*.png:*.jpg:*.jpeg\")\r\n\r\n        file_io_input_ext_entry.grid(row=0, column=0, sticky=\"NSEW\", padx=5, pady=5)\r\n\r\n        # Define widgets for file IO output extension\r\n        dropdown_options = [\".png\", \".jpg\", \".bmp\", \".maxpg\"]\r\n        current_dropdown = tk.StringVar(self)\r\n        current_dropdown.set(dropdown_options[0])\r\n\r\n        file_io_output_ext_dropdown = tk.OptionMenu(file_io_output_ext, current_dropdown, *dropdown_options)\r\n        file_io_output_ext_dropdown.grid(row=0, column=0, sticky=\"NSEW\", padx=5, pady=5)\r\n\r\n        # Define widgets for image preview\r\n        image_preview_test = tk.Label(image, text=\"Test\")\r\n        file_io_preview_open = tk.Button(image, text=\"Open Preview\", command=open_preview)\r\n\r\n        image_preview_test.grid(row=0, column=0, padx=5, pady=5)\r\n        file_io_preview_open.grid(row=1, column=0, padx=5, pady=5)\r\n\r\n        # Define widgets for image GUI button\r\n        image_gui_test = tk.Label(image, text=\"Test\")\r\n        image_gui_open = tk.Button(image, text=\"Open Graphical Editor\", command=open_GUI)\r\n\r\n        image_gui_test.grid(row=0, column=1, padx=5, pady=5)\r\n        image_gui_open.grid(row=1, column=1, padx=5, pady=5)\r\n\r\n        # Define widgets for hue_shift\r\n        tool_hue_shift_hue_text = tk.Label(tool_hue_shift, text=\"Hue:\")\r\n        tool_hue_shift_hue = tk.Spinbox(tool_hue_shift, from_=0, to=360, justify='right')\r\n        tool_hue_shift_sat_text = tk.Label(tool_hue_shift, text=\"Saturation:\")\r\n        tool_hue_shift_sat = tk.Spinbox(tool_hue_shift, from_=-100, to=100, justify='right')\r\n        tool_hue_shift_lum_text = tk.Label(tool_hue_shift, text=\"Luminance:\")\r\n        tool_hue_shift_lum = tk.Spinbox(tool_hue_shift, from_=-100, to=100, justify='right')\r\n\r\n        tool_hue_shift_hue_text.grid(row=0, column=0, padx=5, pady=3)\r\n        tool_hue_shift_hue.grid(row=0, column=1, padx=5, pady=3)\r\n        tool_hue_shift_sat_text.grid(row=1, column=0, padx=5, pady=3)\r\n        tool_hue_shift_sat.grid(row=1, column=1, padx=5, pady=3)\r\n        tool_hue_shift_lum_text.grid(row=2, column=0, padx=5, pady=3)\r\n        tool_hue_shift_lum.grid(row=2, column=1, padx=5, pady=3)\r\n\r\n        tool_hue_shift_sat.delete(0, tk.END)\r\n        tool_hue_shift_sat.insert(0, \"0\")\r\n        tool_hue_shift_lum.delete(0, tk.END)\r\n        tool_hue_shift_lum.insert(0, \"0\")\r\n\r\n        # Define widgets for crop\r\n        tool_crop_top_text = tk.Label(tool_crop, text=\"Point 1 x:\")\r\n        tool_crop_top = tk.Spinbox(tool_crop, from_=0, to=9999999999999, justify='right')\r\n        tool_crop_bottom_text = tk.Label(tool_crop, text=\"Point 2 x:\")\r\n        tool_crop_bottom = tk.Spinbox(tool_crop, from_=0, to=9999999999999, justify='right')\r\n        tool_crop_top_text2 = tk.Label(tool_crop, text=\"Point 1 y:\")\r\n        tool_crop_top2 = tk.Spinbox(tool_crop, from_=0, to=9999999999999, justify='right')\r\n        tool_crop_bottom_text2 = tk.Label(tool_crop, text=\"Point 2 y:\")\r\n        tool_crop_bottom2 = tk.Spinbox(tool_crop, from_=0, to=9999999999999, justify='right')\r\n\r\n        tool_crop_top_text.grid(row=0, column=0, padx=5, pady=3)\r\n        tool_crop_top.grid(row=0, column=1, padx=5, pady=3)\r\n        tool_crop_bottom_text.grid(row=1, column=0, padx=5, pady=3)\r\n        tool_crop_bottom.grid(row=1, column=1, padx=5, pady=3)\r\n        tool_crop_top_text2.grid(row=0, column=2, padx=5, pady=3)\r\n        tool_crop_top2.grid(row=0, column=3, padx=5, pady=3)\r\n        tool_crop_bottom_text2.grid(row=1, column=2, padx=5, pady=3)\r\n        tool_crop_bottom2.grid(row=1, column=3, padx=5, pady=3)\r\n\r\n        # Define widgets for resize\r\n        tool_resize_vertical_text = tk.Label(tool_resize, text=\"Vertical Scale:\")\r\n        tool_resize_vertical = tk.Spinbox(tool_resize, from_=0, to=9999999999999, increment=0.1, justify='right')\r\n        tool_resize_horizontal_text = tk.Label(tool_resize, text=\"Horizontal Scale:\")\r\n        tool_resize_horizontal = tk.Spinbox(tool_resize, from_=0, to=9999999999999, increment=0.1, justify='right')\r\n\r\n        tool_resize_vertical_text.grid(row=0, column=0, padx=5, pady=3)\r\n        tool_resize_vertical.grid(row=0, column=1, padx=5, pady=3)\r\n        tool_resize_horizontal_text.grid(row=1, column=0, padx=5, pady=3)\r\n        tool_resize_horizontal.grid(row=1, column=1, padx=5, pady=3)\r\n\r\n        tool_resize_vertical.delete(0, tk.END)\r\n        tool_resize_vertical.insert(0, \"1.0\")\r\n        tool_resize_horizontal.delete(0, tk.END)\r\n        tool_resize_horizontal.insert(0, \"1.0\")\r\n\r\n        # Other buttons\r\n        tool_apply_button = tk.Button(tool, text=\"Apply\", command=execute_file)\r\n        tool_apply_button.grid(row=0, column=3, padx=5, pady=5)\r\n\r\n\r\ndef main():\r\n    root = tk.Tk()\r\n\r\n    # make it\r\n    Window(root)\r\n    root.resizable(False, False)\r\n\r\n    root.mainloop()\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PhotoManiPY.py	(revision 6a1bf973858c1840f93c19a7f2218d4dae612f63)
+++ PhotoManiPY.py	(date 1592645392030)
@@ -207,9 +207,9 @@
         tool_crop = tk.LabelFrame(tool, text='Crop')
         tool_resize = tk.LabelFrame(tool, text='Resize')
 
-        tool_hue_shift.grid(row=0, column=0, sticky="NSEW", padx=5, pady=5)
-        tool_crop.grid(row=0, column=1, sticky="NSEW", padx=5, pady=5)
-        tool_resize.grid(row=0, column=2, sticky="NSEW", padx=5, pady=5)
+        tool_hue_shift.grid(row=0, column=0, rowspan=2, sticky="NSEW", padx=5, pady=5)
+        tool_crop.grid(row=0, column=1, rowspan=2, sticky="NSEW", padx=5, pady=5)
+        tool_resize.grid(row=0, column=2, rowspan=2, sticky="NSEW", padx=5, pady=5)
 
         # ----- WIDGETS -----
         # Define widgets for file IO main
@@ -242,17 +242,17 @@
         file_io_output_ext_dropdown.grid(row=0, column=0, sticky="NSEW", padx=5, pady=5)
 
         # Define widgets for image preview
-        image_preview_test = tk.Label(image, text="Test")
-        file_io_preview_open = tk.Button(image, text="Open Preview", command=open_preview)
+        image_preview_test = tk.Label(image, text="Preview")
+        file_io_preview_open = tk.Button(image, text="Open", command=open_preview)
 
         image_preview_test.grid(row=0, column=0, padx=5, pady=5)
-        file_io_preview_open.grid(row=1, column=0, padx=5, pady=5)
+        file_io_preview_open.grid(row=0, column=1, padx=5, pady=5)
 
         # Define widgets for image GUI button
-        image_gui_test = tk.Label(image, text="Test")
-        image_gui_open = tk.Button(image, text="Open Graphical Editor", command=open_GUI)
+        image_gui_test = tk.Label(image, text="Graphical Editor")
+        image_gui_open = tk.Button(image, text="Open", command=open_GUI)
 
-        image_gui_test.grid(row=0, column=1, padx=5, pady=5)
+        image_gui_test.grid(row=1, column=0, padx=5, pady=5)
         image_gui_open.grid(row=1, column=1, padx=5, pady=5)
 
         # Define widgets for hue_shift
@@ -311,9 +311,11 @@
         tool_resize_horizontal.insert(0, "1.0")
 
         # Other buttons
-        tool_apply_button = tk.Button(tool, text="Apply", command=execute_file)
+        tool_apply_button = tk.Button(tool, text="Apply Change", command=execute_file)
+        tool_apply_save_button = tk.Button(tool, text="Apply and Save", command=execute_file)\
+
         tool_apply_button.grid(row=0, column=3, padx=5, pady=5)
-
+        tool_apply_save_button.grid(row=1, column=3, padx=5, pady=5)
 
 def main():
     root = tk.Tk()
